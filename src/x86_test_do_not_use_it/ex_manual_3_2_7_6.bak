#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <sys/time.h>
#include <math.h>
#include "QuarkTS.h"


#define QSM_SIGNAL_ENGINE_ON            ((qSM_Signal_t)(1))
#define QSM_SIGNAL_ACCEL                ((qSM_Signal_t)(2))
#define QSM_SIGNAL_CRUISE               ((qSM_Signal_t)(3))
#define QSM_SIGNAL_OFF                  ((qSM_Signal_t)(4))
#define QSM_SIGNAL_RESUME               ((qSM_Signal_t)(5))
#define QSM_SIGNAL_BRAKE_PRESSED        ((qSM_Signal_t)(6))
#define QSM_SIGNAL_REACHED_CRUISING     ((qSM_Signal_t)(7))
#define QSM_SIGNAL_ENGINE_OFF           ((qSM_Signal_t)(8))
#define QSM_SIGNAL_TIMEOUT              ((qSM_Signal_t)(9))


qSM_Status_t Top_Idle_State( qSM_Handler_t h );
qSM_Status_t Top_Initial_State( qSM_Handler_t h );
qSM_Status_t Top_CruisingOff_State( qSM_Handler_t h );
qSM_Status_t Top_AutomatedControl_State( qSM_Handler_t h );

qSM_Status_t AutomatedControl_Accelerating_State( qSM_Handler_t h );
qSM_Status_t AutomatedControl_Resuming_State( qSM_Handler_t h );
qSM_Status_t AutomatedControl_Cruising_State( qSM_Handler_t h );

qSM_Status_t AutomatedControl_Sub_LEDON( qSM_Handler_t h );
qSM_Status_t AutomatedControl_Sub_LEDOFF( qSM_Handler_t h );

qBool_t SigAct_ClearDesiredSpeed( qSM_Handler_t h );
qBool_t SigAct_BrakeOff( qSM_Handler_t h );


qTask_t SMTask;
qSM_t Top_SM, AutomatedControl_SM, LEDBlink_FSM;
qSM_Transition_t Top_SM_ttable[]={
    { Top_Idle_State,               QSM_SIGNAL_ENGINE_ON,     Top_Initial_State,           SigAct_ClearDesiredSpeed,       NULL,                    NULL,                                        },
    { Top_Initial_State,            QSM_SIGNAL_ACCEL,         Top_AutomatedControl_State,  SigAct_BrakeOff,                &AutomatedControl_SM,    AutomatedControl_Accelerating_State,         },
    { Top_AutomatedControl_State,   QSM_SIGNAL_BRAKE_PRESSED, Top_CruisingOff_State,       NULL,                           NULL,                    NULL,                                        },
    { Top_CruisingOff_State,        QSM_SIGNAL_ENGINE_OFF,    Top_Idle_State,              NULL,                           NULL,                    NULL,                                        },
    { Top_CruisingOff_State,        QSM_SIGNAL_ACCEL,         Top_AutomatedControl_State,  SigAct_BrakeOff,                &AutomatedControl_SM,    AutomatedControl_Accelerating_State,         },
    { Top_CruisingOff_State,        QSM_SIGNAL_RESUME,        Top_AutomatedControl_State,  SigAct_BrakeOff,                &AutomatedControl_SM,    AutomatedControl_Resuming_State,             },
};

qSM_Transition_t AutomatedControl_SM_ttable[]={
    { AutomatedControl_Accelerating_State,      QSM_SIGNAL_CRUISE,              AutomatedControl_Cruising_State,        NULL,      NULL,            NULL },
    { AutomatedControl_Cruising_State,          QSM_SIGNAL_ACCEL,               AutomatedControl_Accelerating_State,    NULL,      NULL,            NULL },
    { AutomatedControl_Resuming_State,          QSM_SIGNAL_ACCEL,               AutomatedControl_Accelerating_State,    NULL,      NULL,            NULL },
    { AutomatedControl_Resuming_State,          QSM_SIGNAL_REACHED_CRUISING,    AutomatedControl_Cruising_State,        NULL,      NULL,            NULL },
    { AutomatedControl_Resuming_State,          QSM_SIGNAL_OFF,                 NULL,                                   NULL,      &Top_SM,         Top_CruisingOff_State },    
    { AutomatedControl_Cruising_State,          QSM_SIGNAL_OFF,                 NULL,                                   NULL,      &Top_SM,         Top_CruisingOff_State },    
};


qSM_Transition_t AutomatedControl_LED_ttable[]={
    { AutomatedControl_Sub_LEDON,                 QSM_SIGNAL_TIMEOUT,             AutomatedControl_Sub_LEDOFF,         NULL,  NULL, NULL },          
    { AutomatedControl_Sub_LEDOFF,                QSM_SIGNAL_TIMEOUT,             AutomatedControl_Sub_LEDON,          NULL,  NULL, NULL },         
};

/*===========================Reference clock for the kernel===================*/
qClock_t GetTickCountMs(void){ /*get system background timer (1mS tick)*/
    struct timespec ts;
    clock_gettime(CLOCK_MONOTONIC, &ts);
    return (qClock_t)(ts.tv_nsec / (qClock_t)1000000uL) + ((qClock_t)ts.tv_sec * (qClock_t)1000uL);
}
/*============================================================================*/
void IdleTaskCallback( qEvent_t e ){
    (void)e;
}
/*============================================================================*/
qBool_t SigAct_ClearDesiredSpeed( qSM_Handler_t h ){
    (void)h;
    puts("SigAct_ClearDesiredSpeed");
    return qTrue;
}
/*============================================================================*/
qBool_t SigAct_BrakeOff( qSM_Handler_t h ){
    (void)h;
    puts("SigAct_BrakeOff");
    return qTrue;
}
/*============================================================================*/
qSM_Status_t Top_Idle_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering Idle_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting Idle_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Top_Initial_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering Top_Initial_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting Top_Initial_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Top_CruisingOff_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering Top_CruisingOff_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting Top_CruisingOff_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Top_AutomatedControl_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering Top_AutomatedControl_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting Top_AutomatedControl_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
/*============================================================================*/
qSM_Status_t AutomatedControl_Accelerating_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering AutomatedControl_Accelerating_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("Select desired speed");
            puts("exiting AutomatedControl_Accelerating_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t AutomatedControl_Resuming_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering AutomatedControl_Resuming_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting AutomatedControl_Resuming_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t AutomatedControl_Cruising_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering AutomatedControl_Cruising_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting AutomatedControl_Cruising_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSTimer_t timeout;

qSM_Status_t AutomatedControl_Sub_LEDON( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            qSTimer_Set( &timeout, 2.0f );
            puts("entering AutomatedControl_Sub_LEDON");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting AutomatedControl_Sub_LEDON");
            break;
        default:
            if( qSTimer_Expired( &timeout) ){
                h->NextState = AutomatedControl_Sub_LEDOFF;
            }
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t AutomatedControl_Sub_LEDOFF( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            qSTimer_Set( &timeout, 2.0f );
            puts("entering AutomatedControl_Sub_LEDOFF");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting AutomatedControl_Sub_LEDOFF");
            break;
        default:
            if( qSTimer_Expired( &timeout) ){
                h->NextState = AutomatedControl_Sub_LEDON;
            }
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
void Sig_Handler(int signum ){
    switch( signum){
        case SIGUSR1:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_ENGINE_ON, qFalse );
            break;
        case SIGUSR2:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_ACCEL, qFalse );
            break;        
        case SIGQUIT:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_CRUISE, qFalse );
            break;         
        case SIGALRM:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_OFF, qFalse );
            break;
        case SIGTRAP:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_RESUME, qFalse );     
            break;
        case SIGSYS:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_BRAKE_PRESSED, qFalse );     
            break;
        default:
            break;
    }
}
/*============================================================================*/
int main(int argc, char** argv) {  
    qSM_Signal_t topsm_sig_stack[10];
    qSM_TransitionTable_t top_ttable, auto_ttable, auto_ttable2;
    

    printf("CruiseControl = %d\r\n", getpid() );
    signal( SIGUSR1, Sig_Handler );
    signal( SIGUSR2, Sig_Handler );
    signal( SIGQUIT, Sig_Handler );
    signal( SIGALRM, Sig_Handler );
    signal( SIGTRAP, Sig_Handler );
    signal( SIGSYS, Sig_Handler );

    qOS_Setup(GetTickCountMs, 0.001f, IdleTaskCallback ); 

    qStateMachine_Setup( &AutomatedControl_SM, AutomatedControl_Accelerating_State, NULL, NULL, NULL, NULL );
    qStateMachine_Setup( &LEDBlink_FSM, AutomatedControl_Sub_LEDOFF, NULL, NULL, NULL, NULL );
    /*qStateMachine_SignalQueueSetup( &AutomatedControl_SM, chlsm_sig_stack, sizeof(chlsm_sig_stack)/sizeof(chlsm_sig_stack[0]) );*/ /*use the parent signal queue*/
    
    qStateMachine_TransitionTableInstall( &AutomatedControl_SM, &auto_ttable, AutomatedControl_SM_ttable, 6 );
    qStateMachine_TransitionTableInstall( &LEDBlink_FSM, &auto_ttable2, AutomatedControl_LED_ttable, 2 );
    
    qOS_Add_StateMachineTask(  &SMTask, qMedium_Priority, 0.1f, &Top_SM, Top_Idle_State, NULL, NULL, NULL, NULL, qEnabled, NULL); 
    
    qStateMachine_SignalQueueSetup( &Top_SM, topsm_sig_stack, sizeof(topsm_sig_stack)/sizeof(topsm_sig_stack[0]) );
    qStateMachine_TransitionTableInstall( &Top_SM, &top_ttable, Top_SM_ttable, 6 );

    qStateMachine_Set_CompositeState( &Top_SM, Top_AutomatedControl_State, &AutomatedControl_SM );
    qStateMachine_Set_CompositeState( &Top_SM, Top_AutomatedControl_State, &LEDBlink_FSM );
    

    qOS_StateMachineTask_SigCon( &SMTask );
    qOS_Run();
    (void)argc;
    (void)argv;
    
    return EXIT_SUCCESS;
}