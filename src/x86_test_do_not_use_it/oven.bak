#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <sys/time.h>
#include <math.h>
#include "QuarkTS.h"


#define SIG_TOAST        ((qSM_Signal_t)(1))
#define SIG_BAKE         ((qSM_Signal_t)(2))
#define SIG_OFFTIMEOUT   ((qSM_Signal_t)(3))
#define SIG_OPEN         ((qSM_Signal_t)(4))
#define SIG_CLOSE        ((qSM_Signal_t)(5))
#define SIG_RESET        ((qSM_Signal_t)(6))   

qSM_Status_t DoorClosed_State( qSM_Handler_t h );
qSM_Status_t DoorOpen_State( qSM_Handler_t h );

qSM_Status_t Heating_State( qSM_Handler_t h );
qSM_Status_t Off_State( qSM_Handler_t h );

qSM_Status_t Toasting_State( qSM_Handler_t h );
qSM_Status_t Baking_State( qSM_Handler_t h );


qTask_t SMTask;
qSM_t Top_SM, DoorClosed_SM, Heating_SM;

qSM_Transition_t Top_SM_ttable[]={
    { DoorClosed_State,    SIG_OPEN,        DoorOpen_State,           NULL,                 NULL,                   NULL,   },
    { DoorOpen_State,      SIG_CLOSE,       DoorClosed_State,         NULL,                 QSM_H_NO_HISTORY,                   NULL,   },      
    { DoorClosed_State,    SIG_RESET,       QSM_STATE_TO_SAME,        NULL,                 QSM_H_NO_HISTORY,       NULL,   },      
};

qSM_Transition_t DoorClosed_SM_ttable[]={   
    { NULL,    QSM_SIGNAL_TIMEOUT(0),   Off_State,          NULL,   NULL,            NULL,              },    
    { NULL,    SIG_BAKE,                Heating_State,      NULL,   &Heating_SM,     Baking_State,      },             
    { NULL,    SIG_TOAST,               Heating_State,      NULL,   &Heating_SM,     Toasting_State,    },             
};

qSM_TimeoutStateDefinition_t Oven_timeouts[]={
    { DoorClosed_State, 30.0f, 0 },
};

qSM_Status_t DoorClosed_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering DoorClosed_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting DoorClosed_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t DoorOpen_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering DoorOpen_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting DoorOpen_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}

qSM_Status_t Heating_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("    entering Heating_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("    exiting Heating_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Off_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("    entering Off_State");
            break;
        case QSM_SIGNAL_EXIT:
            qStateMachine_SetTimeout( h->Parent, 0, 30.0f );
            puts("    exiting Off_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}

qSM_Status_t Toasting_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("        entering Toasting_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("        exiting Toasting_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Baking_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("        entering Baking_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("        exiting Baking_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
/*=============================================================================*/
void Sig_Handler(int signum ){
    switch( signum){
        case SIGUSR1:
            qStateMachine_SendSignal( &Top_SM, SIG_OPEN, qFalse );
            break;
        case SIGUSR2:
            qStateMachine_SendSignal( &Top_SM, SIG_CLOSE, qFalse );
            break;        
        case SIGQUIT:
            qStateMachine_SendSignal( &Top_SM, SIG_TOAST, qFalse );
            break;         
        case SIGALRM:
            qStateMachine_SendSignal( &Top_SM, SIG_BAKE, qFalse );
            break;
        case SIGTRAP:
            qStateMachine_SendSignal( &Top_SM, QSM_SIGNAL_TIMEOUT(0), qFalse );     
            break;
        case SIGSYS:  
            qStateMachine_SendSignal( &Top_SM, SIG_RESET, qFalse );
            break;
        default:
            break;
    }
}
/*===========================Reference clock for the kernel===================*/
qClock_t GetTickCountMs(void){ /*get system background timer (1mS tick)*/
    struct timespec ts;
    clock_gettime(CLOCK_MONOTONIC, &ts);
    return (qClock_t)(ts.tv_nsec / (qClock_t)1000000uL) + ((qClock_t)ts.tv_sec * (qClock_t)1000uL);
}
/*=============================================================================*/
int main(int argc, char** argv) {  
    qQueue_t sigqueue;
    qSM_Signal_t topsm_sig_stack[10];
    qSM_TransitionTable_t top_ttable, closed_ttable;
    qSM_TimeoutSpec_t tm_spectimeout;
    qSM_HierarchicalInstance_t htop, hdoorclose, hheating;
    printf("OvenControl = %d\r\n", getpid() );

    signal( SIGUSR1, Sig_Handler );
    signal( SIGUSR2, Sig_Handler );
    signal( SIGQUIT, Sig_Handler );
    signal( SIGALRM, Sig_Handler );
    signal( SIGTRAP, Sig_Handler );
    signal( SIGSYS, Sig_Handler );

    qOS_Setup(GetTickCountMs, 0.001f, NULL ); 

    qStateMachine_Setup( &DoorClosed_SM, Off_State, NULL );
    qStateMachine_Setup( &Heating_SM, QSM_STATE_UNDEFINED, NULL );

    qStateMachine_TransitionTableInstall( &DoorClosed_SM, &closed_ttable, DoorClosed_SM_ttable, qFLM_ArraySize(DoorClosed_SM_ttable) );
    
    qOS_Add_StateMachineTask(  &SMTask, qMedium_Priority, 0.1f, &Top_SM, DoorClosed_State, NULL, qEnabled, NULL); 
    
    qStateMachine_SignalQueueSetup( &Top_SM, &sigqueue, topsm_sig_stack, qFLM_ArraySize(topsm_sig_stack) );
    qStateMachine_TransitionTableInstall( &Top_SM, &top_ttable, Top_SM_ttable, qFLM_ArraySize(Top_SM_ttable) );

    qStateMachine_Set_CompositeState( &Top_SM, DoorClosed_State, &DoorClosed_SM );
    qStateMachine_Set_CompositeState( &DoorClosed_SM, Heating_State, &Heating_SM );

    printf(" %p    %p    %p\r\n", &Top_SM, &DoorClosed_SM, &Heating_SM );
    qStateMachine_CloseDesign( &Top_SM, &htop );
    qStateMachine_CloseDesign( &DoorClosed_SM, &hdoorclose );
    qStateMachine_CloseDesign( &Heating_SM, &hheating );
    
 
    size_t i;
    //printf("childs of %p  %d\r\n", &Top_SM, );
    for(i = 0; i<Top_SM.qPrivate.hInstance->childscount; i++ ){
        printf("%p \r\n", Top_SM.qPrivate.hInstance->childs[ i ] );
    }
    printf("childs of %p\r\n", &DoorClosed_SM);
    for(i = 0; i<DoorClosed_SM.qPrivate.hInstance->childscount; i++ ){
        printf("%p \r\n", DoorClosed_SM.qPrivate.hInstance->childs[ i ] );
    }
    printf("childs of %p\r\n", &Heating_SM);
    for(i = 0; i<Heating_SM.qPrivate.hInstance->childscount; i++ ){
        printf("%p \r\n", Heating_SM.qPrivate.hInstance->childs[ i ] );
    }

    //return EXIT_SUCCESS;
    

    qStateMachine_TimeoutSpecInstall( &Top_SM, &tm_spectimeout, Oven_timeouts, 1  );
      
    qOS_StateMachineTask_SigCon( &SMTask );
    
    qOS_Run();
    (void)argc;
    (void)argv;
    
    return EXIT_SUCCESS;
}