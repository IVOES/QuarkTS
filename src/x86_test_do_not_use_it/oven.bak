#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <sys/time.h>
#include <math.h>
#include "QuarkTS.h"


#define SIG_TOAST        ((qSM_Signal_t)(1))
#define SIG_BAKE         ((qSM_Signal_t)(2))
#define SIG_OFFTIMEOUT   ((qSM_Signal_t)(3))
#define SIG_OPEN         ((qSM_Signal_t)(4))
#define SIG_CLOSE        ((qSM_Signal_t)(5))


qSM_Status_t DoorClosed_State( qSM_Handler_t h );
qSM_Status_t DoorOpen_State( qSM_Handler_t h );

qSM_Status_t Heating_State( qSM_Handler_t h );
qSM_Status_t Off_State( qSM_Handler_t h );

qSM_Status_t Toasting_State( qSM_Handler_t h );
qSM_Status_t Baking_State( qSM_Handler_t h );


qTask_t SMTask;
qSM_t Top_SM, DoorClosed_SM, Heating_SM;

qSM_Status_t QSM_UNDEF( qSM_Handler_t h ){
    return qSM_EXIT_SUCCESS;
}

qSM_Transition_t Top_SM_ttable[]={
    { DoorClosed_State,    SIG_OPEN,        DoorOpen_State,           NULL,     NULL,       NULL,         },
    { DoorOpen_State,      SIG_CLOSE,       DoorClosed_State,         NULL,     NULL,       NULL,         },      
};

qSM_Transition_t DoorClosed_SM_ttable[]={   
    { NULL,    SIG_OFFTIMEOUT,  Off_State,          NULL,   NULL,     NULL,         },    
    { NULL,    SIG_BAKE,        Heating_State,      NULL,   &Heating_SM,     Baking_State,         },             
    { NULL,    SIG_TOAST,       Heating_State,      NULL,   &Heating_SM,     Toasting_State,         },             
};

qSM_Status_t DoorClosed_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering DoorClosed_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting DoorClosed_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t DoorOpen_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("entering DoorOpen_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("exiting DoorOpen_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}

qSM_Status_t Heating_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("    entering Heating_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("    exiting Heating_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Off_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("    entering Off_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("    exiting Off_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}

qSM_Status_t Toasting_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("        entering Toasting_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("        exiting Toasting_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
qSM_Status_t Baking_State( qSM_Handler_t h ){
    switch( h->Signal ){
        case QSM_SIGNAL_ENTRY:
            puts("        entering Baking_State");
            break;
        case QSM_SIGNAL_EXIT:
            puts("        exiting Baking_State");
            break;
        default:
            break;        
    }
    return qSM_EXIT_SUCCESS;
}
/*=============================================================================*/
void Sig_Handler(int signum ){
    switch( signum){
        case SIGUSR1:
            qStateMachine_SendSignal( &Top_SM, SIG_OPEN, qFalse );
            break;
        case SIGUSR2:
            qStateMachine_SendSignal( &Top_SM, SIG_CLOSE, qFalse );
            break;        
        case SIGQUIT:
            qStateMachine_SendSignal( &Top_SM, SIG_TOAST, qFalse );
            break;         
        case SIGALRM:
            qStateMachine_SendSignal( &Top_SM, SIG_BAKE, qFalse );
            break;
        case SIGTRAP:
            qStateMachine_SendSignal( &Top_SM, SIG_OFFTIMEOUT, qFalse );     
            break;
        case SIGSYS:  
            break;
        default:
            break;
    }
}
/*===========================Reference clock for the kernel===================*/
qClock_t GetTickCountMs(void){ /*get system background timer (1mS tick)*/
    struct timespec ts;
    clock_gettime(CLOCK_MONOTONIC, &ts);
    return (qClock_t)(ts.tv_nsec / (qClock_t)1000000uL) + ((qClock_t)ts.tv_sec * (qClock_t)1000uL);
}
/*=============================================================================*/
int main(int argc, char** argv) {  
    qSM_Signal_t topsm_sig_stack[10];
    qSM_TransitionTable_t top_ttable, closed_ttable, heating_ttable;
    /*
-0x1004014f0
-0x100401550
    0x1004015b0
    0x100401610
        0x100401670
        0x1004016d0
*/
    printf("OvenControl = %d\r\n", getpid() );

qSM_Status_t DoorClosed_State( qSM_Handler_t h );
qSM_Status_t DoorOpen_State( qSM_Handler_t h );

qSM_Status_t Heating_State( qSM_Handler_t h );
qSM_Status_t Off_State( qSM_Handler_t h );

qSM_Status_t Toasting_State( qSM_Handler_t h );
qSM_Status_t Baking_State( qSM_Handler_t h );

    printf("-%p\r\n-%p\r\n    %p\r\n    %p\r\n        %p\r\n        %p\r\n", DoorClosed_State, DoorOpen_State, Heating_State, Off_State, Toasting_State, Baking_State );
    puts("------------");
    signal( SIGUSR1, Sig_Handler );
    signal( SIGUSR2, Sig_Handler );
    signal( SIGQUIT, Sig_Handler );
    signal( SIGALRM, Sig_Handler );
    signal( SIGTRAP, Sig_Handler );
    signal( SIGSYS, Sig_Handler );

    qOS_Setup(GetTickCountMs, 0.001f, NULL ); 

    qStateMachine_Setup( &DoorClosed_SM, Off_State, NULL, NULL, NULL, NULL );
    qStateMachine_Setup( &Heating_SM, QSM_UNDEF, NULL, NULL, NULL, NULL );
    /*qStateMachine_SignalQueueSetup( &AutomatedControl_SM, chlsm_sig_stack, sizeof(chlsm_sig_stack)/sizeof(chlsm_sig_stack[0]) );*/ /*use the parent signal queue*/
    
    qStateMachine_TransitionTableInstall( &DoorClosed_SM, &closed_ttable, DoorClosed_SM_ttable, 3);
    /*qStateMachine_TransitionTableInstall( &Heating_SM, &heating_ttable, Heating_SM_ttable, 2 );*/
    
    qOS_Add_StateMachineTask(  &SMTask, qMedium_Priority, 0.5f, &Top_SM, DoorClosed_State, NULL, NULL, NULL, NULL, qEnabled, NULL); 
    
    qStateMachine_SignalQueueSetup( &Top_SM, topsm_sig_stack, sizeof(topsm_sig_stack)/sizeof(topsm_sig_stack[0]) );
    qStateMachine_TransitionTableInstall( &Top_SM, &top_ttable, Top_SM_ttable, 2 );

    qStateMachine_Set_CompositeState( &Top_SM, DoorClosed_State, &DoorClosed_SM );
    qStateMachine_Set_CompositeState( &DoorClosed_SM, Heating_State, &Heating_SM );
    

    qOS_StateMachineTask_SigCon( &SMTask );
    qOS_Run();
    (void)argc;
    (void)argv;
    
    return EXIT_SUCCESS;
}